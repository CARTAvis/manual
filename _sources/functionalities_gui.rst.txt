.. _link_functionalities_gui:

=====================
Functionalities - GUI
=====================
In this section, the available functionalities are introduced in detail. 

----
Help
----

This is alway help from us (carta_helpdesk@asiaa.sinica.edu.tw)! The same mailing 
address can be accessed in *Helpdesk* of the ``Help`` menu.

.. figure:: figures/carta_help_menu.png
   :width: 400 px

In the same ``Help`` menu, the CARTA team provides:

* GitHub Home: https://github.com/CARTAvis/carta
* GitHub Wiki: https://github.com/CARTAvis/carta/wiki
* GitHub Issues: https://github.com/CARTAvis/carta/issues
* Release: https://github.com/CARTAvis/carta/releases
* Manual: https://cartavis.github.io/manual/


-------
Session
-------

CARTA provides the capability to take a snapshot of the application state, called 
*session*, for later usage. This is useful when an ongoing visualization and analysis
have to be interrupted. Once a session is saved, it can be restored at later time to 
continue to work with.

A full snapshot of a *session* includes

1. a layout with link relationship among functionalities.
2. a preference state.
3. a memory of what images have been loaded and how they have been manipulated.

Layout or preferences can be saved independently. *With this freedom, users can make
their own preferred layouts and save the layouts only for future usage*.

To save a session, use *Session* -> *Save* and toggle preferred options in the menu bar.
Use *Session* -> *Manage/Restore* to manage or restore saved sessions. Preference or layout
can be restored independently if desired.

.. figure:: figures/session_save_restore.png
   :width: 800 px

For CARTA-server only, an ongoing session can be shared to others via *Session* -> *Share*.
A URL will show up in the status bar. Simply share it with your collaborators and use an
internet browser to open it. *Note that when your session is shared to others, all clients
including yourself can operate CARTA concurrently*. Please use with caution.


-----------------
For visualization
-----------------

imageViewer
^^^^^^^^^^^

**Display and information**

``imageViewer`` accepts link from all other functionalities. ``imageViewer`` is the core 
function of CARTA, which displays images. To open an image, use *Data -> Open* in the menu bar or 
right-click menu. Once an image is opened, it will be shown in the panel with cursor information 
at the bottom. The bottom cursor information panel contains pixel value with a unit, pixel coordinate 
((0,0) to the bottom-left corner), world coordinate, and image name. By moving around the 
cursor within the image, these information will update in real time. 

.. figure:: figures/imageViewer_ui.png
   :width: 600 px

**Image navigation**

Image can be zoomed by using mouse wheel, scrolling up for zoom in and scrolling down for zoom out.
Note that the convergence point is determined by the cursor position at the time scrolling is
performed. Image can be re-centered by double-click. The pixel being double-clicked will be 
placed at the center of the ``imageViewer`` panel. Zoom scale and image pan can be reset to the 
default by clicking *Zoom Reset* button and *Pan Reset* button in the menu bar.

**Region of interest**

Region of interest (*experimental and under implementation*) is defined via the *region* buttons 
in the tool bar or *Draw* menu in menu bar. CARTA supports four different regions, including 
*Rectangle*, *Polygon*, *Ellipse*, and *Point*. Regions defined with CASA viewer or ds9 can be 
imported to CARTA by using *Data* -> *Open* in the menu bar. *Saving the regions defined in CARTA 
is under implementation.* Regions can be removed by using *Data* -> *Close* in the menu bar. When 
multiple regions present and if linked animator is shown, a control panel to switch among different
regions will pop up.

By toggling the *Image Settings* in the menu bar, users can modify the properties of the displayed
images. 

.. figure:: figures/imageViewer_settings_grid.png
   :width: 800 px

**Configuring coordinates and axes**

Coordinate related settings are grouped in the *Grid* tab. Using *Canvas -> Settings* sub-tab,
users can change the displayed coordinate system. Currently CARTA supports J2000, B1950, ICRS, Galactic,
and Ecliptic coordinate systems. Note that the there is no actual *regrid* performed on the pixel image
when coordinate system is changed. Only the grid layer is changed accordingly. The grid layer can be 
hidden by uncheck *Coordinate System* checkbox. Cursor information panel can be hidden as well 
by unchecking *Cursor* checkbox. By default, the displayed coordinate systems of different images may 
be different. For example, one image is in J2000 and the other is in Galactic. If users want to see
the same coordinate system in different images, toggle *Apply to All Images* checkbox. 
*Canvas -> Color* sub-tab allows users to change the theme of the ``imageViewer``. Currently the 
default color theme is *Light on Dark* which is usually suitable for presentation. *Dark on Light*, 
suitable for publication on the other hand, will be implemented later.

To enable grid line plotting and change its appearance including thickness, opacity, spacing, and color, 
use *Grid -> Settings* and *Grid -> Color* sub-tabs. The *Axes/Border -> Settings* allows users to 
disable axes border layer (uncheck *Axes/Border* checkbox), to plot coordinate axes as internal axes 
(check *internal axes* checkbox), to change axes appearance, and to perform axes permutation. For the 
axes permutation functionality, displayed image axes can be reordered to, for example, right ascension
verse radio velocity. *Currently, the grid line plotting of declination verse radio velocity is under 
implementation.*

The appearance and the format of the axes labels are customizable in *Labels -> Settings* 
and *Labels -> Color* sub-tabs, while the appearance of the ticks is configurable in 
*Ticks -> Settings* and *Ticks -> Color* sub-tabs.


**Contour plotting**

To plot contours of a given image, use the *Contour* tab. 

.. figure:: figures/imageViewer_settings_contours.png
   :width: 600 px

In the example above, two sets of contours, named as *Set1* and *Set2* are generated in 
the *Contour Sets* sub-tab. The *Range* method allows users to specify minimum and maximum levels
for generating contours. In total, a number of contours (including the minimum and maximum levels)
specified by *Level Count* with a spacing scheme specified by *spacing* will be generated. 
In this case, the *Set1* set includes three levels in linear spacing between 0 and 1.0. If 
*Minimum* method is chosen, a set of contour levels will be generated starting from the specified 
minimum level with a step specified by *interval* and a total number of contours specified by 
*Level Count*. "Percentile Range" method is similar to the *Range* method. Once a method and its 
corresponding parameters are set, press *Add/Update Contour Set* button to generate or update a 
contour set. Press *Delete Contour Set* button to delete the contour set specified by *Name*. The 
appearance, such as line width, color, etc., of a contour set is configurable in the tab named 
as the name of the contour set. In the example here, two sets of contours are customized to have 
different colors. 

The *Smoothness* dropdown box allows users to select how the contours are smoothed 
(especially useful if the image is noisy). Options are:

* No line combiner (highest accuracy, high performace, artifects may be seen)
* Line combiner (high accuracy, less artifects, lower performace)
* Gaussian blur 3x3 (default, good accuracy, high performace)
* Gaussian blur 5x5 (good accuracy, high performace)
* Box blur 3x3 (good accuracy, high performace)
* Box blur 5x5 (good accuracy, high performace)

**Image stack**

CARTA supplies image stacking capability (experimental). In other words, three images with 
*identical pixel dimension and WCS information* can be loaded to CARTA to perform RGB color
image composition. 

.. figure:: figures/imageViewer_settings_stack.png
   :width: 600 px

In the example above, three images are loaded with CARTA. In *Stack* tab, a list of the three
images is shown but is grey out. By unchecking *Auto Select* checkbox, the images in the list is 
selectable. To enable three-color composition, use shift+click to select all images in the list. 
Once multiple images are selected, a checkbox called *Group* will show up and by toggling it,
image composition is performed. The color (red, green, blue, white) for each image can 
be re-assigned afterward. 

The *Pan/Zoom all* checkbox allows users to decide whether or not to apply pan or zoom action
to all opened images. If multiple images with different fields of view of the sky are opened,
it is advised to uncheck this option to allow different images to have independent zoom level and
pan state.


**Region list**

.. figure:: figures/imageViewer_settings_regions.png
   :width: 600 px

When multiple regions present, *Regions* tab allows users to configure region properties. 
The size and position can be adjusted with the text boxes. Colors of the regions can be 
customized as well, like the example above where *rectangle* region is in orange, 
*ellipse* region is in cyan, and *point* region is in green.



colormap
^^^^^^^^

``colormap`` must link to ``imageViewer`` to be effective. ``colormap`` allows users to:

* change the color of raster image in the ``imageViewer``
* change the color of NaN (Not a Number) pixels
* change the color of axis border

The user interface looks like the following figure, with controls of low and upper bounds of 
color mapping, scale functions, color lists, and unit conversion (under implementation). 

.. figure:: figures/colormap_ui.png
   :width: 600 px

By default, the lower and upper bounds of the color mapping are determined by global minimum 
and maximum values of pixels. With the clip function accessible via the tool bar or menu bar,
user can apply different clip levels to enhance image readability when viewing high contrast 
images. For example, by applying 98% clip, the lower bound will be set to the value of the 1%-th 
pixel after sorting all pixels from minimum to maximum. Same applies to the upper bound which will
be set to the value of the 99%-th pixel. In the clip menu, if *per frame* is toggled, the 
clip calculation will only adopt the pixel of the current viewing frame, not all pixels in the
entire image cube. 

.. figure:: figures/colormap_clip.png
   :width: 600 px

The scale functions, which also help to enhance image readability, determine how different values 
between the lower and upper bounds are mapped to the color palette. Default it is *linear*. 
Options are (formulae apply to normalized values between 0 and 1):

* Linear: x -> x
* Square root: x -> x^0.5 
* Square: x -> x^2
* Logarithm: x -> log(ax+1)/log(a+1), where a = 1000
* Polynomial3: x -> x^3 
* Polynomial4: x -> x^4 

CARTA supplies various colors for the raster image in the ``imageViewer``. Part of the colors are 
adopted from the famous python plotting library *matplotlib* (https://matplotlib.org). 

.. figure:: figures/colormap_colors.png
   :width: 600 px

By default, the unit dropdown box displays the pixel unit defined in the image header. Other units
eligible for conversion are also shown. For example, users may convert the default unit Jy/beam to Kelvin 
in order to normalize the intensity scale when beam size changes significantly in different channels 
of the cube. If clip is triggered, pixels in the converted unit will be used for calculations. *Note 
that this unit conversion functionality is under implementation.*

In the colormap settings, accessible in the menu bar or mouse right-click, advanced color manipulation
methods are supplied. In the *Color Map* tab, the actual RGB color functions of the current color 
palette are visualized and can be manipulated by dragging the slide bars. Individual slide bar can be
dragged by un-toggling *Synchronize Colors* checkbox. The color palette can be *reversed* or *inverted* by 
toggling *reverse* checkbox or *invert* checkbox. By default, same color applies to all images if 
multiple image sets are opened. This feature can be disabled by toggling *Apply All* checkbox.

.. figure:: figures/colormap_settings_colorMap.png
   :width: 600 px

The color of NaN pixels is adjustable in the NaN tab. Default color is the color set to the lower 
bound. For example, if *Mutant* color is selected, NaN pixels are in lime color. Different color can be 
set by toggling out *Default* checkbox.

.. figure:: figures/colormap_settings_NaN.png
   :width: 600 px

The *Transform* tab allows user to fine tune how color palette is further scaled on top of the 
selected scale function. Currently CARTA support *gamma* transfer function. Default gamma value is unity
which means no further scaling on top of current scale function. Right-click or press ESC key to reset
gamma value to unity.

.. figure:: figures/colormap_settings_transform.png
   :width: 600 px

The background color of the axis border in the ``imageViewer`` can be changed in the 
*Border Background* tab. Default color is black. Uncheck *Default* checkbox to enable 
options for changing different colors.

.. figure:: figures/colormap_settings_borderBackground.png
   :width: 600 px


animator
^^^^^^^^

``animator`` must link to ``imageViewer`` to be effective. ``animator`` allows users to:

1. switch among different images
2. switch among different channels
3. switch among different stokes
4. switch among different right ascension or declination planes when axis 
   permutation happens
5. switch among different regions    

.. figure:: figures/animator_gui.png
   :width: 600 px

The content of the ``animator`` panel is dynamic. This means that, for example, when 
multiple images are opened, image sub-panel will show up. Same idea applies to channel 
or stokes sub-panel if multiple channels or stokes are present. For normal image cubes, 
channel sub-panel helps to switch among different channel planes. However, if axis 
permutation happens by using ``imageViewer``, channel sub-panel will become the new 
z-axis sub-panel like declination, for example. By using *Animate* in the menu bar or from
the right-click pop-up menu, sub-panel can be hidden or shown.

For each sub-panel, the index of the frame currently shown in ``imageViewer`` is displayed.
Users can change the index to jump to a certain frame. Same can be done by dragging the
horizontal slide bar. The two numbers on the left and right of the slide bar indicate the
lowest and highest frame indices to animate. Default adopts the first and the last indices.
There are seven control buttons. Their functions are shown in the figure.

.. figure:: figures/animator_seven_buttons.png
   :width: 800 px

When the *Settings* is toggled, extra options are shown. Users can define the step for the control 
buttons. Animation *Rate* can be defined as well. How fast the animation plays at *Rate=100* 
depends on the hardware capability. The cache mechanism helps for the animation performance *after*
a complete cycle of the animation is executed. This is especially prominent for large image cubes. 
The radio buttons can be used to change how the animation is played. *Wrap* mode allows the 
animation to be repeated indefinitely. *Reverse* mode allows the animation to be played forward 
and backward once the bound frames are hit. *Jump* mode makes the two boundary frames *blink*.



imageContext
^^^^^^^^^^^^

``imageContext`` must link to ``imageViewer`` to be effective. As shown in the following figure, 
``imageContext`` helps users to see which part of the image is currently shown in the ``imageViewer`` 
by a blue (default) rectangle. The size of the rectangle is changed according to the zoom action 
in the ``imageViewer``. This is especially useful when viewing big images such as wide field 
images or very high angular resolution maps. Users can use mouse to move the rectangle around to 
see different parts of images. 

.. figure:: figures/imageContext_fullWindow.png
   :width: 900 px

The settings of ``imageContext`` can be activated by checking ``Context Settings`` in the menu bar.
Through the ``Image Box`` tab, users can modify the appearance of the blue (default) rectangle, 
such as color, line width, and visibility. The ``Compass``, shown as green arrows (celestial coordinate: 
north and east) and yellow arrows (pixel coordinate: x and y), can be configured in the ``Compass`` 
tab.

.. figure:: figures/imageContext_settings.png
   :width: 500 px


imageZoom
^^^^^^^^^

``imageZoom`` must link to ``imageViewer`` to be effective. The contents of the ``imageZoom`` panel 
are determined by the zoom action in the ``imageViewer``. In other words, it shows the pixels near the 
cursor position *after* a zoom action is made. The magnification factor (20 as default) is 
adjustable in the ``Zoom Settings``. 

.. figure:: figures/imageZoom_fullWindow.png
   :width: 900 px

------------
For analysis
------------

histogram
^^^^^^^^^
``histogram`` must link to ``imageViewer`` to be effective. Optional link from ``colormap`` to
``histogram`` enables coloring of the histogram plot. ``histogram`` provides basic functions to
generate histogram plots based on the image data displayed in ``imageViewer`` (experimental). 
A pre-defined layout for ``histogram`` can be accessed in `Layout`  of the menu bar. The example 
in the following figure demonstrates a histogram plot of a gaussian noise image. By default, 
a histogram plot generated by using all image pixels will be shown.

.. figure:: figures/histogram_ui.png
   :width: 900 px

In the histogram settings, users can modify how a histogram plot is displayed. In the `Display` tab,
bins number or width can be adjusted. Different styles of histogram, such as line, outline, filled
outline are provided. The default y-scale is in logarithmic. If ``colormap`` is linked to
``histogram``, the histogram plot can be colored as well. 

The displayed x-range of the histogram plot can be adjusted in the `Range` tab. Clip levels can 
be set and applied directly to the image shown in ``imageViewer``.

If an image cube is loaded, or regions of interest are defined, users may use the `Selection` tab
to specify the pixels to be adopted in generating the histogram plot.

.. figure:: figures/histogram_setting.png
   :width: 600 px  





profiler
^^^^^^^^
``profiler`` must link to ``imageViewer`` to be effective. ``profiler`` provides basic 
spectral line visualization and fitting tools (experimental). A pre-defined layout 
for ``profiler`` can be accessed in `Layout`  of the menu bar. ``profiler`` displays a 
spectrum after a region of interest is defined. In the example below, a double-peak line
profile derived within the rectangle region is observed. 


.. figure:: figures/profiler_ui.png
   :width: 900 px

The appearance of the spectrum plot, such as axis labels, legend, line style etc., is adjustable 
in the profiler settings by using the tabs of `Display`, `Range`, and `Curves`. By default, 
the mean pixel value within the region of interest is adopted to generate the spectrum. 
Other options, such as median, variance, sum, etc., are available in the `Statistic` dropdown 
box of the ``Profiles`` tab.  

.. figure:: figures/profiler_setting.png
   :width: 600 px

With the `Fit` tab, users can fit the spectrum by gaussian and/or polynomial functions. By selecting 
the number of gaussian and/or the terms of polynomial, fitting results shown in dashed line will be
overplotted and numerical results are appended under the plot. By default, CARTA adopted random 
heuristics to set the initial free parameters of the fitting functions. Manual initial guess 
of free parameters is possible by toggling the `Manual Initial Guess` checkbox. Fitting 
residuals, or the mean and rms values of the spectrum, are accessible in the same `Fit` tab.  


.. figure:: figures/profiler_setting_fit.png
   :width: 600 px

statistics
^^^^^^^^^^

``statistics`` must link to ``imageViewer`` to be effective. It provides information on image 
properties, and statistics quantities once a region of interest (or multiple regions of interest) 
is defined (see the figure below).

.. figure:: figures/statistics_fullWindow.png
   :width: 900 px

Through the ``Statistics Settings``, users can define which quantities are shown in the panel. For 
the image properties, they are

* *Shape*: image pixel dimensions
* *Restoring Beam*: restored clean beam size of interferometric observations
* *Median Restoring Beam*: median value of restored clean beam size (if beam size changes channel by channel)
* *RA Range*: right ascension coverage of the image
* *Dec Range*: declination coverage of the image
* *Frequency Range*: frequency coverage of the image cube
* *Velocity Range*: velocity coverage of the image cube
* *Frequency*: frequency of current channel
* *Velocity*: velocity of current channel
* *Stokes*: stokes value of current channel
* *Direction Type*: 
* *Brightness Unit*: brightness unit of the image pixel
* *Frame Count*: index of the current frame (default is channel index). If axis permutation happens, 
  for example, viewing right ascension v.s. channel, it shows current declination frame index. 
* *Beam Area*: beam area of the restored clean beam

.. figure:: figures/statistics_settings1.png
   :width: 500 px

For the statistics quantities of region of interest, they are

* *Sum*: a sum of pixel values within the region of interest.
* *Flux Density*: flux density within the region of interest.
* *Mean*: a mean value of pixels within the region of interest.
* *RMS*: root mean square value of pixels within the region of interest.
* *Sigma*: standard deviation of pixel values within the region of interest.
* *Sum of Squares*: a sum of squared pixel values within the region of interest.
* *Min*: minimum pixel values within the region of interest.
* *Max*: maximum pixel values within the region of interest.
* *BLC*: pixel coordinate of the bottom left pixel of the bound box (rectangle) of the region of interest.
* *TRC*: pixel coordinate of the top right pixel of the bound box (rectangle) of the region of interest.
* *Min Pos*: pixel coordinate of the minimum pixel within the region of interest.
* *Max Pos*: pixel coordinate of the maximum pixel within the region of interest.
* *BLCf*: celestial coordinate of the bottom left pixel of the bound box (rectangle) of the region of interest.
* *TRCf*: celestial coordinate of the top right pixel of the bound box (rectangle) of the region of interest.
* *Min Pos f*: celestial coordinate of the minimum pixel within the region of interest.
* *Max Pos f*: celestial coordinate of the maximum pixel within the region of interest.

.. figure:: figures/statistics_settings2.png
   :width: 500 px   
